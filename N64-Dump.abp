/* FT232H,MCP23S17を用いたN64吸出しプログラム [for ActiveBasic v4]
 * RGBA_CRT 2016 [rgba3crt1p@gmail.com]
 *
 * reference materials：
 * 	http://n64.icequake.net/mirror/www.crazynation.org/N64/
 * 	https://github.com/sanni/cartreader/
 * 	FTDI Documents
 * 	http://www.hdl.co.jp/USB/mpsse_spi/
 * 	
 * connection:：
 * 	ADBus-SPI <-> MCP23S17
 * 	ADBus4~7  <-> N64 /WE /RE ALE_L ALE_H
 * 	ACBus0~7  <-> N64 LoByte
 * 	MCP23S17-GPIOA <-> N64 HiByte
 * 	MCP23S17-GPIOB <-> N64 EEP_CLK /RESET S_DAT
 */

#console
#include "D2XX.sbp"
#include <RGBALib.sbp>

Const IO_BUFFERSIZE=6000*2
Const USB_BUFFER_SIZE=5504+64*3

Const CART_BASEADR_SRAM=&H08000000
Const CART_BASEADR_ROM =&H10000000

Const FT_USB_LATENCY=1	'1〜254

Dim hFT As FT_HANDLE
Dim DevIdx As Long
Dim outbuf[IO_BUFFERSIZE] As Byte,c As DWord
Dim dwAB As DWord

Print " - N64 ROM DUMPER using FT232H [TEST PROGRAM] - PROGRAMMED BY RGBA_CRT 2016/9/6"
Print

if ListUpFTDI_Devices()<>FT_OK Then End
Input "Input device [num] > ",DevIdx


'device open
FT_Open(DevIdx,hFT)
if hFT=0 Then
	Print "Could not open Device."
	End
Else
	Print ex"Open OK\n"
Endif

'Setup Connection
if SetupFTDI_Device(hFT)<>TRUE Then Print "setup err"

InitSPI()
N64_InitPorts()
FTDI_SendCommand()

Dim romSize As DWord,op AS DWord,header AS N64_ROM_HEADER
*ROM_INFO
	input "[INSERT CART AND PRESS ENTER]",DevIdx

	GetRomInfo(header)
	if header.Title[0]=ex"\xFF" Then lstrcpy(header.Title,"[CART CONNECT ERR]")
	PrintRomInfo(header)

	romSize=SloveRomSize()
	printf(ex"[推定]ROM Size0x:%08X -> %dMB\n\n",romSize,romSize/(1024*1024))

	Print ex"[SELECT OPERATION]\n\t1.DUMP FULL ROM\n\t2.INPUT ROM SIZE AND DUMP\n\t3.SRAM DUMP [TEST]\n\t4.ROM VIEWER [UNCODEING]\n\t5.EXIT"
	input "> ",op
	Print

	Select Case op
		Case 1
			if DumpFullRom(sprintfStr("%s.z64",header.Title),romSize)<>TRUE Then Print " [Error]":Goto *EXIT_PROGRAM

		Case 2
			Input ex"Input Dump Size (0x -> &H)\n > ",op
			Print
			if DumpFullRom(sprintfStr("%s.z64",header.Title),op)<>TRUE Then Print " [Error]":Goto *EXIT_PROGRAM

		Case 3
			Print "SRAM READ"
			Input ex"Input Dump Size (example:32KB -> &H8000)\n > ",op
			Print 
			DumpFullRom("sram.raw",op,CART_BASEADR_SRAM)
			ConvertLittleEndian("sram.raw","sram.sra")
			Print ex"Saved sram dump As \qsram.sra\q"

		Case 4
		'	Input ex"\nAddress : ",op

		Case 5
			Goto *EXIT_PROGRAM
	End Select

	Print ex"\n\n"
	Goto *ROM_INFO

*EXIT_PROGRAM

N64PowerOFF()
FT_Close(hFT)
Print "END"
'Sleep(-1)
End


Const N64_DUMP_BUFFER_SIZE=&H200	'512バイトずつアドレス指定が必要なのでこれが最大
Function DumpFullRom(fileName As BytePtr,RomSize As DWord)(BaseAddress As DWord) As Long
	Dim out As File ,inbuf As BytePtr,inSize As DWord
	Dim reqAdr=&H0 As DWord

	if BaseAddress=0 Then 
		BaseAddress=CART_BASEADR_ROM
	Else if BaseAddress=&HFFFFFFFF Then 
		BaseAddress=&H00000000
	Endif

	inbuf=calloc(N64_DUMP_BUFFER_SIZE)
	out.openFile(fileName,GENERIC_WRITE)

	N64PowerON()

	N64_SetBusDir(N64_BUS_DIR_OUTPUT)
	N64_SetAddress(BaseAddress)
	N64_SetBusDir(N64_BUS_DIR_INPUT)
	if FTDI_SendCommand()<>FT_OK Then Goto *DFR_EXIT

	Print "dumping data..."
	Dim time As DWord,lt As DWord
	time=GetTickCount()
	Do
		N64_SetBusDir(N64_BUS_DIR_OUTPUT)
		N64_SetAddress(reqAdr + BaseAddress)
		N64_SetBusDir(N64_BUS_DIR_INPUT)
		N64_readRequest(N64_DUMP_BUFFER_SIZE/2)

		if reqAdr Mod &H5000 = 0 Then 
			ConsoleReturnLine()
			printf(ex"Address=%08X ... %d%%  [%dKB/s] [buf:%d]           ",reqAdr,(reqAdr/RomSize)*100,reqAdr/(GetTickCount()-time),c)
			if GetKeyState(VK_ESCAPE) And &H80 Then Print ex"\n[ESC]Cancelled by user.":Goto *DFR_EXIT
		End If

		if FTDI_SendCommand()<>FT_OK Then Goto *DFR_EXIT
		if FT_Read(hFT,inbuf,N64_DUMP_BUFFER_SIZE,inSize)<>FT_OK Then Goto *DFR_EXIT
	'	Dump(inbuf,N64_DUMP_BUFFER_SIZE,reqAdr,TRUE)

		out.write(inbuf,inSize)
		reqAdr+=inSize
		if reqAdr=>RomSize Then ExitDo
	Loop
	lt=GetTickCount()-time
	printf(ex"\nDump Successfull !\nTime:%dms = %ds = %dmin\n",lt,lt/1000,lt/1000/60)
	DumpFullRom=TRUE

*DFR_EXIT
	free(inbuf)
	out.close()
	N64PowerOFF()
End Function

'大体のエミュのセーブデータの形式がリトルエンディアン（DWord)
Function ConvertLittleEndian(fname As BytePtr,outname AS BytePtr) As Long
	Dim out As File,in As File,buf As *DWord,size As DWord,i As DWord
	in.openFile(fname,GENERIC_READ)
	size=in.length()
	buf=calloc(size+12)
	in.read(buf,size)
	in.close()
	For i=0 To size/4-1
		ChangeEndianDW(buf[i])
	Next i 
	out.openFile(outname,GENERIC_WRITE)
	out.write(buf,size)
	out.close()
	free(buf)
End Function

Sub GetRomInfo(ByRef header AS N64_ROM_HEADER)
	Dim inbuf As BytePtr
	inbuf=calloc(N64_ROM_HEADER_SIZE)

	N64PowerON()

	N64_SetBusDir(N64_BUS_DIR_OUTPUT)
	N64_SetAddress(CART_BASEADR_ROM)
	N64_SetBusDir(N64_BUS_DIR_INPUT)
	N64_readRequest(N64_ROM_HEADER_SIZE/2)
	if FTDI_SendCommand()<>FT_OK Then Print "Connection err.":Goto *PRI_EXIT

	N64PowerOFF()
	if FT_Read(hFT,inbuf,N64_ROM_HEADER_SIZE,dwAB)<>FT_OK Then Goto *PRI_EXIT

	memcpy(VarPtr(header),inbuf,sizeof(N64_ROM_HEADER))

*PRI_EXIT
	free(inbuf)
End Sub

Sub PrintRomInfo(ByRef info AS N64_ROM_HEADER)
	Dim title[20] As Byte, GID[4] As Byte

	With info
		ChangeEndianDW(.CRC1)
		ChangeEndianDW(.CRC2)
		ChangeEndianDW(.EntryPoint)
		memcpy(title,.Title,20)
		memcpy(GID  ,.GameID,4)
		printf(ex"N64 ROM Infomation\n\tTitle   : %s\n\tGameID\t: NUS-%s\n\tVersion : 1.%d\n\tCRC1 : %08X\n\tCRC2 : %08X\n\tEntryPoint  : %08X\n\tCompression : ",title,GID,.Version,.CRC1,.CRC2,.EntryPoint)
		if .isCompress=&H13 Then 
			print "YES"
		Else
			print "NO"
		Endif
	End With
	Print
End Sub

Const N64_SIZESLOVE_SAMPLE_SIZE = &H80
Function SloveRomSize() As DWord
	Dim header As BytePtr,inbuf As BytePtr,i As Long

	header=calloc(N64_SIZESLOVE_SAMPLE_SIZE)
	inbuf =calloc(N64_SIZESLOVE_SAMPLE_SIZE)

	N64PowerON()

	'ROMサイズの推測
	'1MBごとにアクセスしてみてFFだらけor先頭と同じデータだったら終わってるだろうと推測
	For i=0 To 65 Step 2
		N64_SetBusDir(N64_BUS_DIR_OUTPUT)
		N64_SetAddress(&H100000*i +&H10000000)
		N64_SetBusDir(N64_BUS_DIR_INPUT)
		N64_readRequest(N64_SIZESLOVE_SAMPLE_SIZE/2)
		if FTDI_SendCommand()<>FT_OK Then ExitFunction
		if FT_Read(hFT,inbuf,N64_SIZESLOVE_SAMPLE_SIZE,dwAB)<>FT_OK Then Goto *SRS_EXIT
'		Dump(inbuf,16,&H100000*i,TRUE):		Print

		if isFilled(inbuf,N64_SIZESLOVE_SAMPLE_SIZE,&HFF)=TRUE Then ExitFor	'SAMPLE_SIZE分がFFで埋められていたら
		if i=0 Then
			memcpy(header,inbuf,N64_SIZESLOVE_SAMPLE_SIZE)
		Else
			if compareBin(inbuf,header,N64_SIZESLOVE_SAMPLE_SIZE)=TRUE Then ExitFor	'先頭と比較
		Endif
	Next i

	if i=>65 Then i=64
	if i Mod 4 <>0 Then i+=4-(i Mod 4)
	SloveRomSize=i*&H100000

*SRS_EXIT
	N64PowerOFF()
	free(header)
	free(inbuf )
End Function


Function isFilled(adr As BytePtr,size As DWord,checkByte As Byte) As Long
	Dim i As Long
	For i=0 To size-1
		if adr[i]<>checkByte Then ExitFunction
	Next
	isFilled=TRUE
End Function
		
Function compareBin(data1 As BytePtr,data2 As BytePtr,size As DWord) As Long
	Dim i As Long
	For i=0 To size-1
		if data1[i]<>data2[i] Then ExitFunction
	Next
	compareBin=TRUE
End Function
		


Sub PrintBuffer()
	printf(ex"[output buffer : %d/%d -> %d%%]",c,IO_BUFFERSIZE,c/IO_BUFFERSIZE*100)
End Sub

'http://www.zophar.net/fileuploads/2/10655uytsm/N64ops03.txt
Const N64_ROM_HEADER_SIZE=&H40
Type N64_ROM_HEADER
	Initial_Reg As Word
	isCompress As Byte	'12h=uncomplessed 13=complessed
	uk1[4] As Byte
	EntryPoint As DWord
	uk2 As DWord
	CRC1 As DWord
	CRC2 As DWord
	uk3[1] As DWord
	Title[19] As Byte
	uk4[6] As Byte
	GameID[3] As Byte
	Version As Byte
End Type

	

'--------------------------------- N64 AREA ----------------------------------------------

Sub N64_InitPorts()
	MCP_WriteRegister(MCP23017_GPPUA,&HFF)	'GPIO-A pullup Enable
	MCP_WriteRegister(MCP23017_GPPUB,&HFF)	'GPIO-B pullup Enable

	FTDI_GPIOA=N64_WE or N64_RE	'コントロールpin
	N64_SetCtrlPin(FTDI_GPIOA)
	MCP_WriteRegister(MCP23017_IODIRB,SDAT_DDR_IN)
	N64PowerOFF()
End Sub

'FT232H-GPIOA
'[SCL][SDO][SDI][CS][N64_WR][N64_RD][ALE_L][ALE_H]
'0x80コマンドを使用するときは下位4ビットのSPI系に迷惑をかけないようにする。
Dim FTDI_GPIOA As Byte
Const FTDI_GPIOA_DDR = &HFB
Const N64_WE=&H10
Const N64_RE=&H20
Const ALE_L =&H40
Const ALE_H =&H80

'MCP23S17-GPIOB
Const EEP_CLK=&H01
Const EEP_DAT=&H02	'SDAT
Const RESET = &H04
Const N64_POWER=&H08
Const SDAT_DDR_IN = &H02	'1=input
Const SDAT_DDR_OUT= &H00

Sub N64PowerON()
	MCP_WriteRegister(MCP23017_GPIOB,RESET)
	FTDI_SendCommand()
	Sleep(3)
End Sub

Sub N64PowerOFF()
	MCP_WriteRegister(MCP23017_GPIOB,N64_POWER or RESET)
	FTDI_SendCommand()
	Sleep(3)
End Sub

'WE RE ALE_H ALE_Lの制御
Sub N64_SetCtrlPin(newFT_GPIOA As Byte)
	if FTDI_GPIOA And N64_WE =0 Then debug
	'Set N64 control pin
	FTDI_GPIOA=(FTDI_GPIOA And &H0F) or (newFT_GPIOA And &HF0)
	outbuf[c]=&H80				:	c++
	outbuf[c]=FTDI_GPIOA		:	c++
	outbuf[c]=FTDI_GPIOA_DDR	:	c++		'(Out:1 , input:0)
End Sub

Sub N64_readRequest(nLoop As DWord)
	Dim i As Long
	For i =1 To nLoop
		N64_SetCtrlPin(N64_WE)				'RE -> Low
		MCP_ReadRegister(MCP23017_GPIOA)	'Hibyte Request
		outbuf[c]=&H83	:	c++				'LoByte Request
		N64_SetCtrlPin(N64_WE or N64_RE)	'RE -> Hi
	Next i
End Sub

Enum N64_BUS_DIRECTION
	N64_BUS_DIR_INPUT  = &HFF
	N64_BUS_DIR_OUTPUT = &H00
End Enum

Sub N64_SetBusDir(dir As N64_BUS_DIRECTION)
	'ACBusの方向設定(1でOutput)
	if dir=N64_BUS_DIR_INPUT Then
		outbuf[c]=&H82				:	c++
		outbuf[c]=00				:	c++
		outbuf[c]=NOT(dir) And &HFF	:	c++
	Endif
	'MCP-GPIOAの方向設定(1でInput)
	MCP_WriteRegister(MCP23017_IODIRA,dir )
End Sub

Sub N64_SetAddress(adr As DWord)
	Dim adrHi As Word,adrLo As Word
	adrHi=adr>>16
	adrLo=adr And &H0000FFFF

	'WE RE ALE_HL -> High[
	N64_SetCtrlPin(&HF0)
	
	'Set N64LoByte
	MCP_WriteRegister(MCP23017_GPIOA,adrHi>>8)
	outbuf[c]=&H82				:	c++
	outbuf[c]=adrHi And &H00FF	:	c++
	outbuf[c]=&HFF				:	c++	'ALL OUTPUT

	'ALE_H -> Low
	N64_SetCtrlPin(N64_WE or N64_RE or ALE_L)
	MCP_WriteRegister(MCP23017_GPIOA,adrLo>>8)
	outbuf[c]=&H82				:	c++
	outbuf[c]=adrLo And &H00FF	:	c++
	outbuf[c]=&HFF				:	c++	'ALL OUTPUT

	'ALE_L -> Low
	N64_SetCtrlPin(N64_WE or N64_RE)

End Sub


'--------------------------------- MCP23S17 AREA ----------------------------------------------
#include"MCP23017_Lib.sbp"
Const MCP_CONTROLBYTE_WRITE=&H40
Const MCP_CONTROLBYTE_READ =&H41

'dir: 1=input 0=output
Sub MCP_SetPort(dir As Word,value As Word) 
	Dim spi_out_buf[3] As Byte
	SPI_CS(SPI_CS_LOW)
		spi_out_buf[0]=MCP_CONTROLBYTE_WRITE
		spi_out_buf[1]=MCP23017_IODIRA
		spi_out_buf[2]=dir	and &H00FF
		spi_out_buf[3]=dir>>8
		MakeSendData(spi_out_buf,4)
	SPI_CS(SPI_CS_HIGH)
	SPI_CS(SPI_CS_LOW)
		spi_out_buf[0]=MCP_CONTROLBYTE_WRITE
		spi_out_buf[1]=MCP23017_GPIOA
		spi_out_buf[2]=value and &H00FF
		spi_out_buf[3]=value>>8
		MakeSendData(spi_out_buf,4)
	SPI_CS(SPI_CS_HIGH)
End Sub

Sub MCP_WriteRegister(reg As Byte,value As Byte) 
	Dim spi_out_buf[2] As Byte
	SPI_CS(SPI_CS_LOW)
		spi_out_buf[0]=MCP_CONTROLBYTE_WRITE
		spi_out_buf[1]=reg
		spi_out_buf[2]=value'	and &H00FF
		MakeSendData(spi_out_buf,3)
	SPI_CS(SPI_CS_HIGH)
End Sub

Sub MCP_ReadPortAB()
	Dim spi_out_buf[2] As Byte
	SPI_CS(SPI_CS_LOW)
		spi_out_buf[0]=MCP_CONTROLBYTE_READ
		spi_out_buf[1]=MCP23017_GPIOA
		MakeSendData(spi_out_buf,2)
		RequestData(2)
	SPI_CS(SPI_CS_HIGH)
End Sub

Sub MCP_ReadRegister(reg As Byte)
	Dim spi_out_buf[2] As Byte
	SPI_CS(SPI_CS_LOW)
		spi_out_buf[0]=MCP_CONTROLBYTE_READ
		spi_out_buf[1]=reg
		MakeSendData(spi_out_buf,2)
		RequestData(1)
	SPI_CS(SPI_CS_HIGH)
End Sub

'------------------------------ SPI AREA -------------------------------------------------


'バッファためる系
Sub InitSPI()
	/* Setting device by MPSSE command
	 * [85]LoopBackDisable
	 * [97]Disable adaptive clocking 
	 * [8c]Enable 3 Phase Data Clocking
	 * [8A]Disables the clk divide by 5 to allow for a 60MHz master clock
	 * [86]Set TCK Clock [0002]->10MHz
	 */
	 
	memcpy(outbuf+c,ex"\x85\x97\x8c\x8A\x86\x02\x00",7)  :	c+=7
	SPI_CS(1)
End Sub

Const PORT_SCLK 	= &H01  
Const PORT_DO 		= &H02  
Const PORT_DI		= &H04  
Const PORT_ALERT 	= &H20   'ADBUS5  
Const PORT_THERM 	= &H80   'ADBUS7  
Const MSB_FALLING_EDGE_CLOCK_BYTE_OUT 	= &H11  
Const MSB_RISING_EDGE_CLOCK_BIT_IN 	= &H22  
Const MSB_RISING_EDGE_CLOCK_BYTE_IN 	= &H20  
Const SET_DATA_BITS_LOW_BYTE 	= &H80  
Const READ_DATA_BITS_LOW_BYTE 	= &H81  

Const SPI_ADBUS_DIR = &HFB	'0b11 11 10 11
Const SPI_CS_LOW = 0
Const SPI_CS_HIGH = 8

Sub SPI_CS(bHL As Byte)
	memcpy(outbuf+c,ex"\x80\x00\xFB",3)
	if bHL=0 Then
		FTDI_GPIOA=SPI_CS_LOW  or (FTDI_GPIOA And &HF0)
	Else
		FTDI_GPIOA=SPI_CS_HIGH or (FTDI_GPIOA And &HF0)
	End If
	outbuf[c+1]=FTDI_GPIOA
	c+=3
End Sub

Sub MakeSendData(data As BytePtr,length As Word)
	if length=0 Then ExitSub
	length--
	outbuf[c+0]=MSB_FALLING_EDGE_CLOCK_BYTE_OUT
	outbuf[c+1]=length and &H00FF
	outbuf[c+2]=length>>8
	memcpy(outbuf+c+3,data,length+1)
	c+=3+length+1
End Sub

Sub RequestData(length As Word)
	length--
	outbuf[c+0]=MSB_RISING_EDGE_CLOCK_BYTE_IN
	outbuf[c+1]=length and &H00FF
	outbuf[c+2]=length>>8
	c+=3
End Sub

'---------------------------------------- FT232HL AREA -------------------------------------------------

Function SetupFTDI_Device(hFT As FT_HANDLE) As Long
	'セットアップ
	Dim ftStatus As Long,bufsize As DWord,buf As BytePtr
	
	ftStatus = ftStatus or FT_GetQueueStatus(hFT, bufsize)		 ' Get the number of bytes in the FT2232H receive buffer
	buf=calloc(bufsize)

	if (ftStatus = FT_OK) And  (bufsize > 0) Then _
		FT_Read(hFT, buf, bufsize, dwAB)  'Read out the data from FT2232H receive buffer
	free(buf)

'	ftStatus = ftStatus or FT_SetFlowControl(hFT, FT_FLOW_DTR_DSR or FT_FLOW_RTS_CTS, 0, 0)
	ftStatus = ftStatus or FT_SetUSBParameters(hFT, USB_BUFFER_SIZE, USB_BUFFER_SIZE)	'Set USB request transfer size
	ftStatus = ftStatus or FT_SetChars(hFT, FALSE, 0, FALSE, 0)							'Disable event and error characters
	ftStatus = ftStatus or FT_SetTimeouts(hFT, 0, 5000)									'Sets the read and write timeouts in milliseconds for the FT2232H
	ftStatus = ftStatus or FT_SetLatencyTimer(hFT, FT_USB_LATENCY)						'Set the latency timer	'小さくしすぎると他のUSB機器に影響
	ftStatus = ftStatus or FT_SetBitMode(hFT, &H0, FT_BITMODE_RESET) 					'Reset controller
	ftStatus = ftStatus or FT_SetBitMode(hFT, &H0, FT_BITMODE_MPSSE)				 	'Enable MPSSE mode
	Sleep(10)

	if ftStatus<>0 Then
		Print "fail on initialize FT2232H device! "
		SetupFTDI_Device=FALSE
		ExitFunction
	End If
	SetupFTDI_Device=TRUE
End Function

Function FTDI_SendCommand() As Long 
	FTDI_SendCommand=FT_Write(hFT,outbuf,c,dwAB)
	c=0
End Function

Function ListUpFTDI_Devices() AS Long
	ListUpFTDI_Devices=-1
	Dim devCount AS Long

	if FT_GetNumDevices(devCount,NULL,FT_LIST_BY_NUMBER_ONLY)<>FT_OK Then Print "FTDI Driver Error." : ExitFunction
	if devCount=0 Then Print "FTDI Device not found.":ExitFunction
	printf(ex"Found FTDI Devices : %d\n",devCount)

	Dim i AS Long
	Dim serial[64] As Byte,desc[64] As Byte
	For i = 0 To devCount-1
		if FT_ListDevices(i,serial,FT_LIST_BY_INDEX or FT_OPEN_BY_SERIAL_NUMBER)<>FT_OK Then ExitFunction
		if FT_ListDevices(i,desc  ,FT_LIST_BY_INDEX or FT_OPEN_BY_DESCRIPTION)<>FT_OK Then ExitFunction
		printf(ex" [%02d]%s - %s\n",i,serial,desc)
	Next i
	Print
	ListUpFTDI_Devices=FT_OK
EndFunction



