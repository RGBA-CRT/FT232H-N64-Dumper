'Referenced docs:
' - http://micro-64.com/database/gamesave.shtml
' - https://github.com/sanni/cartreader/blob/master/Cart_Reader/N64.ino
' - https://github.com/DaedalusX64/daedalus/blob/master/Source/Core/FlashMem.cpp
Const CART_SAVE_FLASH_CMD_REG_ADR = &H08010000

Const NUS_SAVE_FLASH_CMD_STATUS = &HE1000000
Const NUS_SAVE_FLASH_CMD_READ = &HF0000000

Sub SaveFlash_Command(cmd As DWord)
	NUS_SetAddress(CART_SAVE_FLASH_CMD_REG_ADR)
	NUS_writeData(cmd>>16)
	NUS_writeData(cmd)
End Sub

Sub SaveFlash_printID()
	Dim inbuf[&H220] As Byte, inSize As DWord
	SaveFlash_CmdStatusImmdate(inbuf As SAVE_FLASH_STATUS)

	Dim FlashType As BytePtr
	FlashType = SaveFlash_GetFlashChipLabel(inbuf[7])
	printf(ex"Flash Type: %s\n", FlashType)

	'
	SaveFlash_CmdReadEnable()

	NUS_SetAddress(CART_BASEADR_SRAM)
	NUS_readRequest(&H20)
	NUS_SetAddress(CART_BASEADR_SRAM+&H8000-16)
	NUS_readRequest(&H40)
	NUS_SetAddress(CART_BASEADR_SRAM+&H8000)
	NUS_readRequest(&H40)

	FTDI_SendCommand()
	FT_Read(hFT, inbuf, &H40, inSize)
	printf(ex"\nTop of FlashRAM:\n", NUS_SAVE_FLASH_CMD_STATUS)
	Dump(inbuf, &H40, CART_BASEADR_SRAM)

	FT_Read(hFT, inbuf, &H80, inSize)
	printf(ex"\nTop of FlashRAM:\n", NUS_SAVE_FLASH_CMD_STATUS)
	Dump(inbuf, &H80, CART_BASEADR_SRAM)

	FT_Read(hFT, inbuf, &H80, inSize)
	printf(ex"\nTop of FlashRAM:\n", NUS_SAVE_FLASH_CMD_STATUS)
	Dump(inbuf, &H80, CART_BASEADR_SRAM)

End Sub

Sub SaveFlash_CmdReadEnable()
	SaveFlash_Command(NUS_SAVE_FLASH_CMD_READ)
End Sub

Sub SaveFlash_CmdStatus()
	SaveFlash_Command(NUS_SAVE_FLASH_CMD_STATUS)

	NUS_SetAddress(CART_BASEADR_SRAM)
	NUS_readRequest(&H4)
	SaveFlash_Command(NUS_SAVE_FLASH_CMD_READ)
End Sub

Type SAVE_FLASH_STATUS
	data[6] As Byte
	chip_id As Byte
End Type

Sub SaveFlash_CmdStatusImmdate(buf As *SAVE_FLASH_STATUS)

	SaveFlash_CmdStatus()

	Dim inSize As DWord
	FTDI_SendCommand()
	FT_Read(hFT, buf, &H8, inSize)

	printf(ex"FlashRAM command 0x%X results:\n", NUS_SAVE_FLASH_CMD_STATUS)
	Dump(buf, &H8, CART_BASEADR_SRAM)
End Sub

Enum NUS_FLASH_CHIP_ID
	MX29L1100KC = &H1E
	MX29L1101KC = &H1D
	MN63F81MPM = &HF1
End Enum

Function SaveFlash_GetFlashChipLabel(id As Byte) As BytePtr
	Dim FlashType As BytePtr
	Select Case id
		Case MX29L1100KC
			FlashType = "MX29L1100KC-15B0"
		Case MX29L1101KC
			FlashType = "MX29L1101KC-15B0"	'未確認
		Case MN63F81MPM
			FlashType = "NUS MN63F81MPM"
		Case else
			FlashType = "Unknown"
	End Select
	SaveFlash_GetFlashChipLabel = FlashType
End Function

Function SaveFlash_Detect() As NUS_SAVE_TYPE
	Dim status As SAVE_FLASH_STATUS
	SaveFlash_CmdStatusImmdate(VarPtr(status))

	if GetDWord(status.data) = &H01801111 then
		if status.chip_id = MX29L1100KC then
			SaveFlash_Detect = NUS_SAVE_FLASH_WORD
		else
			SaveFlash_Detect = NUS_SAVE_FLASH_BYTE
		endif

		Dim FlashType As BytePtr
		FlashType = SaveFlash_GetFlashChipLabel(status.chip_id)
		printf(ex"Flash Type: %s\n", FlashType)
	else
		SaveFlash_Detect = NUS_SAVE_UNKNOWN
	endif
End Function

Const SaveSram_Detect_SloveSize = 128
Const SaveSram_Detect_FFFill_CRC = &H652d544c
Function SaveSram_Detect()(base_addr As DWord) As BOOL
	if base_addr = 0 then base_addr = CART_BASEADR_SRAM
	NUS_SetAddress(base_addr)
	NUS_readRequest(SaveSram_Detect_SloveSize>>1)

	Dim inbuf[SaveSram_Detect_SloveSize] As Byte, inSize As DWord
	FTDI_SendCommand()
	FT_Read(hFT, inbuf, SaveSram_Detect_SloveSize, inSize)


	Dim hash As DWord
	hash = crc32.GetHash(inbuf, NUS_SLOVE_SAMPLE_SIZE1)
	if hash <> SaveSram_Detect_FFFill_CRC then
		printf(ex"may be sram found\n")
		Dump(inbuf, SaveSram_Detect_SloveSize)
		printf(ex"hash = %x\n", hash)
		SaveSram_Detect = TRUE
	else
		SaveSram_Detect = FALSE
	endif
End Function

Const CART_BASEADR_SRAM_2ND = &H08040000
Const CART_BASEADR_SRAM_3RD = &H08080000
Function SaveSramX3_Detect() As BOOL
	if SaveSram_Detect(CART_BASEADR_SRAM) = FALSE then
		SaveSramX3_Detect = FALSE
		exitfunction
	endif
	if SaveSram_Detect(CART_BASEADR_SRAM_2ND) = FALSE then
		SaveSramX3_Detect = FALSE
		exitfunction
	endif
	if SaveSram_Detect(CART_BASEADR_SRAM_3RD) = FALSE then
		SaveSramX3_Detect = FALSE
		printf(ex"WARNING: 2nd SRAM found. this is not surpported.\n")
		exitfunction
	endif
	SaveSramX3_Detect = TRUE
End Function


Enum NUS_SAVE_TYPE
	NUS_SAVE_NONE = 0
	NUS_SAVE_SRAM
	NUS_SAVE_FLASH_BYTE
	NUS_SAVE_FLASH_WORD
	NUS_SAVE_EEPROM
	NUS_SAVE_SRAMx3	' for dezaemon
	NUS_SAVE_UNKNOWN
	_NUS_SAVE_TYPE_NUM
End Enum

Dim NUS_SAVE_TYPE_LABEL[_NUS_SAVE_TYPE_NUM] = [
	"NUS_SAVE_NONE", 
	"NUS_SAVE_SRAM", 
	"NUS_SAVE_FLASH (Byte)", 
	"NUS_SAVE_FLASH (Word)", 
	"NUS_SAVE_EEPROM", 
	"NUS_SAVE_SRAMx3", 
	"NUS_SAVE_UNKNOWN"
] As BytePtr


Function SloveSaveType() As NUS_SAVE_TYPE
	Dim ret As NUS_SAVE_TYPE
	ret = SaveFlash_Detect()
	if ret <> NUS_SAVE_UNKNOWN then
		SloveSaveType = ret
	else
		if SaveSramX3_Detect() then
			SloveSaveType = NUS_SAVE_SRAMx3
		else if SaveSram_Detect() then
			SloveSaveType = NUS_SAVE_SRAM
		else
			'現時点でEEPROMかセーブなしか判定できないのでUnknownを返す
			SloveSaveType = NUS_SAVE_UNKNOWN
		endif
	endif
End Function

Function GetSaveTypeLabel(stype As NUS_SAVE_TYPE) As BytePtr
	if stype >= _NUS_SAVE_TYPE_NUM then stype = NUS_SAVE_UNKNOWN
	GetSaveTypeLabel = NUS_SAVE_TYPE_LABEL[stype As DWord]
End Function

Function DumpSramFile(fileName As BytePtr, SramSize As DWord, SaveType As NUS_SAVE_TYPE)(BaseAddress As DWord) As Long
	Dim ret = TRUE As Long
	Dim out As File
	if out.openFile(fileName, GENERIC_WRITE) = FALSE then
		Print "Failed to create file."
		ExitFunction
	endif

	Dim buffer As BytePtr
	buffer = calloc(SramSize)

	if SaveType = NUS_SAVE_SRAMx3 then
		ret = DumpSram(buffer + SramSize/3*0, SramSize/3, NUS_SAVE_SRAM, CART_BASEADR_SRAM)
		ret = DumpSram(buffer + SramSize/3*1, SramSize/3, NUS_SAVE_SRAM, CART_BASEADR_SRAM_2ND)
		ret = DumpSram(buffer + SramSize/3*2, SramSize/3, NUS_SAVE_SRAM, CART_BASEADR_SRAM_3RD)
	else
		ret = DumpSram(buffer, SramSize, SaveType, BaseAddress)
	endif

	out.write(buffer, SramSize)
	free(buffer)

	out.close()

	DumpSramFile = ret
End Function


Function DumpSram(buffer As BytePtr, SramSize As DWord, SaveType As NUS_SAVE_TYPE)(BaseAddress As DWord) As Long
	Dim inSize As DWord
	Dim readOffset = &H0 As DWord
	Dim IsWordAddressing As BOOL

	if BaseAddress = 0 then
		BaseAddress = CART_BASEADR_SRAM
	endif

	Const BufferSize = 128 ' bytes

	if SaveType = NUS_SAVE_FLASH_WORD then
		IsWordAddressing = TRUE
	else
		IsWordAddressing = FALSE
	endif

	flush()
	N64PowerON()

	NUS_SetAddress(BaseAddress)
	if FTDI_SendCommand() <> FT_OK then Goto *DFR_EXIT

	Print "dumping data..."
	Dim time As DWord, lt As DWord, retry As DWord
	time = GetTickCount()
	Do
		if readOffset >= SramSize then ExitDo

		if IsWordAddressing then
			NUS_SetAddress(BaseAddress + (readOffset>>1))
		else
			NUS_SetAddress(BaseAddress + readOffset)
		endif
		NUS_readRequest(BufferSize>>1)

		if FTDI_SendCommand() <> FT_OK then Goto *DFR_EXIT
		if FT_Read(hFT, buffer + readOffset, BufferSize, inSize) <> FT_OK then Goto *DFR_EXIT
		if inSize <> BufferSize then
			printf(ex"receive size error.\n")
			retry++
			if retry>5 then Goto *DFR_EXIT
			Continue
		endif

		readOffset+ = BufferSize

		if readOffset Mod (&H500*2) = 0 then
			ConsoleReturnLine()
			printf(ex"Address = %08X ... %d%% [%dKB/s] ", readOffset, (readOffset/SramSize)*100, readOffset/(GetTickCount()-time))
			if GetKeyState(VK_ESCAPE) And &H80 then Print ex"\n[ESC]Cancelled by user.":Goto *DFR_EXIT

		endif

	Loop
	lt = GetTickCount()-time
	printf(ex"\nDump Successfull !\nTime:%dms = %ds = %dmin\n", lt, lt/1000, lt/1000/60)
	DumpSram = TRUE

*DFR_EXIT
	N64PowerOFF()

End Function


