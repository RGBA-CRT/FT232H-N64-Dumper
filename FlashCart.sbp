/* ported from: https:'github.com/sanni/cartreader/blob/master/Cart_Reader/N64.ino
 *
 */
Sub flash_printID(baseAdr AS DWord)
			NUS_SetAddress(baseAdr + (&H555 << 1)) 
			NUS_writeData(&HAA)
			NUS_SetAddress(baseAdr + (&H2AA << 1))
			NUS_writeData(&H55)
			NUS_SetAddress(baseAdr + (&H555 << 1))
			NUS_writeData(&H90)

			  '' Read manufacturer ID
			NUS_SetAddress(baseAdr)
			NUS_readRequest(&H110/2)

			'RESET
			NUS_SetAddress(baseAdr )
			NUS_writeData(&HFF)

			Dim inbuf[&H110] AS Byte,inSize AS DWord
			FTDI_SendCommand()
			FT_Read(hFT,inbuf,&H110,inSize)

			Dump(inbuf,&H110,baseAdr)

			Dim mfID AS Word, deviceID AS Word
			mfID=GetWord(inbuf+0)
			deviceID=GetWord(inbuf+2)
			printf(ex"ManufactureID : %04X  DeviceID : %04X\n",mfID,deviceID)

			'https:'www.jedec.org/sites/default/files/docs/JEP106AJ.pdf
			If mfID>>8 = &H89 Then Print "Intel"
			Print
End Sub

Function IntelFlash_WaitWritable(baseAddr AS DWord) AS BOOL
	Dim retry AS DWord, status As DWord, inSize AS DWord
	Do 
		NUS_SetAddress(baseAddr)
		FTDI_SendCommand()
		NUS_readRequest(1)
		FTDI_SendCommand()

		FT_Read(hFT,VarPtr(status),2,inSize)

		'printf(ex"\t\t\t\tStatus = %08X, %d \n", status, retry)
		if status And &H8000 Then _
			ExitDo

		retry++
	Loop

	if status And &H0200 Then _
		printf(ex"[Error][FlashStatusCheck] Device Protect Error\n")

	if status And &H0800 Then _
		printf(ex"[Error][FlashStatusCheck] Program Error\n")

	if status And &H1000 Then _
		printf(ex"[Error][FlashStatusCheck] Vpp Range Error\n")
End Function

' ChipErase‚Í•·‚©‚È‚©‚Á‚½
Sub IntelFhash_ChipErase(baseAdr AS DWord)
	
	N64PowerON()
	IntelFhash_Reset(baseAdr)
	NUS_SetAddress(baseAdr + (&H555 << 1)) 
	NUS_writeData(&HAA)
	NUS_SetAddress(baseAdr + (&H2AA << 1))
	NUS_writeData(&H55)
	NUS_SetAddress(baseAdr + (&H555 << 1))
	NUS_writeData(&H80)
	NUS_SetAddress(baseAdr + (&H555 << 1))
	NUS_writeData(&HAA)
	NUS_SetAddress(baseAdr + (&H2AA << 1))
	NUS_writeData(&H55)
	NUS_SetAddress(baseAdr + (&H555 << 1))
	NUS_writeData(&H10)
	
	FTDI_SendCommand()

	IntelFlash_WaitWritable(baseAdr)
	Print

	IntelFhash_Reset(baseAdr)
	N64PowerOFF()
End Sub

Sub IntelFhash_Reset(baseAdr AS DWord)
	NUS_SetAddress(baseAdr )
	NUS_writeData(&HFF)
End Sub

'http://www.mipsasoft.com/MS7/Hardware/FLASH/StrataFlash%20P30-T%20Data%20Sheet.pdf
Sub IntelFhash_Erase(baseAdr AS DWord)
	
	N64PowerON()

	IntelFhash_Reset(baseAdr)
	FTDI_SendCommand()

	Dim status AS DWord,inSize AS DWord, retry AS DWord
	Dim currBlock AS DWord, lastBlock AS DWord
	lastBlock = &H1FFFFFF

	' Erase 4 blocks with 16kwords each
	For currBlock = 0 To &H20000 Step &H8000
		printf(ex"16kword block: %08Xh- \r", baseAdr + currBlock)

	    ' Unlock block command
	    NUS_SetAddress(baseAdr + currBlock)
	    NUS_writeData(&H60)
	    NUS_SetAddress(baseAdr + currBlock)
	    NUS_writeData(&HD0)

			FTDI_SendCommand()

	    ' Erase command
	    NUS_SetAddress(baseAdr + currBlock)
	    NUS_writeData(&H20)
	    NUS_SetAddress(baseAdr + currBlock)
	    NUS_writeData(&HD0)
		FTDI_SendCommand()

		IntelFlash_WaitWritable(baseAdr + currBlock)
		
		printf(ex"\n")
	Next currBlock


  ' Erase up to 255 blocks with 64kwords each
	For currBlock = &H20000 To lastBlock Step &H20000
		printf(ex"64kword block: %08Xh- %d%% \r",  baseAdr + currBlock, (currBlock*100)/lastBlock)
		' Unlock block command
		NUS_SetAddress(baseAdr + currBlock)
		NUS_writeData(&H60)
		NUS_SetAddress(baseAdr + currBlock)
		NUS_writeData(&HD0)

		' Erase command
		NUS_SetAddress(baseAdr + currBlock)
		NUS_writeData(&H20)
		NUS_SetAddress(baseAdr + currBlock)
		NUS_writeData(&HD0)
		FTDI_SendCommand()

		IntelFlash_WaitWritable(baseAdr + currBlock)
	
		printf(ex"\n")	
	Next currBlock

	IntelFhash_Reset(baseAdr)
	N64PowerOFF()

End Sub


Sub IntelFhash_WriteFile(baseAdr As DWord, fileName AS BytePtr)

	N64PowerON()

	Const IF_WRITE_PAGE_SIZE = 64
	Dim in AS File, fileSize AS DWord
	if in.openFile(fileName, GENERIC_READ)=FALSE Then
		Print "Open Err"
		ExitSub
	End If
	fileSize = in.length()

	Dim buf[IF_WRITE_PAGE_SIZE] AS Byte
	Dim totalBytes AS DWord, i AS DWord

	For totalBytes = 0 To fileSize-1 Step 64
		in.read(buf, IF_WRITE_PAGE_SIZE)
		'Dump(buf, 64, totalBytes + baseAdr)
		
		if (totalBytes Mod 16384) = 0 Then _
			printf(ex"[WriteIntelFlash] %Xh- %dMB/%dMB %d%% \n", _
				baseAdr + totalBytes, _
				totalBytes/(1024*1024), _
				fileSize/(1024*1024), _
				totalBytes*100/fileSize
			)

		' Buffered program command		
		NUS_SetAddress(baseAdr + totalBytes)
		NUS_writeData(&HE8)
		FTDI_SendCommand()

		'Check Status register
		IntelFlash_WaitWritable(baseAdr + totalBytes)

		' Write word count (minus 1)
        NUS_SetAddress(baseAdr + totalBytes)
        NUS_writeData(&H1F)

		FTDI_SendCommand()

		For i=0 To IF_WRITE_PAGE_SIZE-1	Step 2
		'	printf(ex"\t%08X :: %04X\n", baseAdr + totalBytes + i,  ((buf[ i ] << 8) And &HFF00) Or (buf[ i+1 ] And &HFF))
			NUS_SetAddress(baseAdr + totalBytes + i)
			NUS_writeData( ((buf[ i ] << 8) And &HFF00) Or (buf[ i+1 ] And &HFF) )
		Next i

		FTDI_SendCommand()

		NUS_SetAddress(baseAdr + totalBytes + 62)
		NUS_writeData(&HD0)

		IntelFlash_WaitWritable(baseAdr + totalBytes + 62)

'		printf(ex"\n")
'		ExitFor

	Next totalBytes

	IntelFhash_Reset(baseAdr)
	FTDI_SendCommand()
	in.close()
	

	N64PowerOFF()
	FTDI_SendCommand()
End Sub

Sub ReadCFI()
	
				'N64 flash cart test (ref:https://github.com/sanni/cartreader/blob/master/Cart_Reader/N64.ino)

				Dim inbuf[NUS_DUMP_BUFFER_SIZE] AS Byte,inSize AS DWord
				flash_printID(CART_BASEADR_ROM )
				flash_printID(CART_BASEADR_ROM + &H2000000)
				flash_printID(CART_BASEADR_ROM + &H4000000)
				flash_printID(CART_BASEADR_ROM + &H6000000)

				Print
				Print "CFI INFO"

				'CFI READ
				'00000055 98
				NUS_SetAddress(CART_BASEADR_ROM + (&H55 << 1)) 
				NUS_writeData(&H98)

				NUS_SetAddress(CART_BASEADR_ROM)
				NUS_readRequest(NUS_DUMP_BUFFER_SIZE/2)
				
				NUS_SetAddress(CART_BASEADR_ROM+NUS_DUMP_BUFFER_SIZE)
				NUS_readRequest(NUS_DUMP_BUFFER_SIZE/2)
				
				'RESET
				NUS_SetAddress(CART_BASEADR_ROM )
				NUS_writeData(&HFF)

				FTDI_SendCommand()
				FT_Read(hFT,inbuf,NUS_DUMP_BUFFER_SIZE,inSize)

				Dump(inbuf,NUS_DUMP_BUFFER_SIZE)

				FT_Read(hFT,inbuf,NUS_DUMP_BUFFER_SIZE,inSize)

				Dump(inbuf,NUS_DUMP_BUFFER_SIZE,NUS_DUMP_BUFFER_SIZE)
			
				Dim out AS File
				out.openFile("CFI.bin",GENERIC_WRITE)
				out.write(inbuf,NUS_DUMP_BUFFER_SIZE)
				out.close()

				
				N64PowerOFF()

End Sub